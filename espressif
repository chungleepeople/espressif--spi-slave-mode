#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
#include <string.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "freertos/queue.h"

#include "lwip/sockets.h"
#include "lwip/dns.h"
#include "lwip/netdb.h"
#include "lwip/igmp.h"

#include "esp_wifi.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_event_loop.h"
#include "nvs_flash.h"
#include "soc/rtc_cntl_reg.h"
#include "esp32/rom/cache.h"
#include "driver/spi_slave.h"
#include "esp_log.h"
#include "esp_spi_flash.h"
#include "driver/gpio.h"



#define GPIO_HANDSHAKE 2
#define GPIO_MOSI 23
#define GPIO_MISO 19
#define GPIO_SCLK 18
#define GPIO_CS 5



/* SPI Slave example, receiver (uses SPI Slave driver to communicate with sender)

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/


 
void my_post_setup_cb(spi_slave_transaction_t *trans) {
    WRITE_PERI_REG(GPIO_OUT_W1TS_REG, (1<<GPIO_HANDSHAKE));
}

void my_post_trans_cb(spi_slave_transaction_t *trans) {
    WRITE_PERI_REG(GPIO_OUT_W1TC_REG, (1<<GPIO_HANDSHAKE));
}

void app_main()
{
    int n=0;
    esp_err_t ret;

    spi_bus_config_t buscfg={
        .mosi_io_num=GPIO_MOSI,
        .miso_io_num=GPIO_MISO,
        .sclk_io_num=GPIO_SCLK
    };

    spi_slave_interface_config_t slvcfg={
        .mode=1,    // Changed to mode 3
        .spics_io_num=GPIO_CS,
        .queue_size=3,
        .flags=0,
        .post_setup_cb=my_post_setup_cb,
        .post_trans_cb=my_post_trans_cb
    };

    gpio_config_t io_conf={
        .intr_type=GPIO_INTR_DISABLE,
        .mode=GPIO_MODE_OUTPUT,
        .pin_bit_mask=(1<<GPIO_HANDSHAKE)
    };

    gpio_config(&io_conf);

    gpio_set_pull_mode(GPIO_MOSI, GPIO_PULLUP_ONLY);
    gpio_set_pull_mode(GPIO_SCLK, GPIO_PULLUP_ONLY);
    gpio_set_pull_mode(GPIO_CS, GPIO_PULLUP_ONLY);

    ret=spi_slave_initialize(VSPI_HOST, &buscfg, &slvcfg, 1);
    assert(ret==ESP_OK);

    //WORD_ALIGNED_ATTR char sendbuf[33]={0}; // Added the WORD ALIGNED Attribute
    //WORD_ALIGNED_ATTR char recvbuf[33]={0};
    spi_slave_transaction_t t;
    t.length=32*8; //-- [bits]
    t.rx_buffer = (void*)malloc(32*sizeof(uint8_t));
    t.tx_buffer = NULL;
    //memset(&t, 0, sizeof(t));

    while (1) {
	for (int i=0;i<32;i++)
	 *((uint8_t*)(t.rx_buffer)+i) = 0xA5;
        //memset(recvbuf, 0xA5, 32);
        //sprintf(sendbuf, "SLAVE TX BUFFER"); // Changed String

        //t.tx_buffer=sendbuf;
        
        ret = spi_slave_transmit(VSPI_HOST, &t, portMAX_DELAY);
 
	if( n % 50 == 0){
	   printf("N = %d, trans_len = %d: ", n%1000, t.trans_len);
 	   for(int i=0;i<32;i++)
		printf("%02x, ", *((uint8_t*)(t.rx_buffer)+i));
	  	printf("\n");
	}
	 n++;
    }

}
